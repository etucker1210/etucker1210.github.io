function [ F ] = calcCortexF( varargin )
% CALCFORCES converts the binary Cortex analog data to forces
%   requires a calibration matrix and the *.anc Cortex-generated data file.
%   Can be called without arguments, in which case it will request the user
%   identify the appropriate files.
%       SYNTAX:
%           F = calcCortexF;
%           F = calcCortexF(calMat,binMat);
%               calMat is a 6x6 force plate calibration matrix
%               binMat is the Cortex data output from analog data
%                   collection of size Mx7, for which time is in the first
%                   column.

% Created: 21 April 2015
% Last Modified: 21 April 2015
% Author: S. Tonia Hsieh

wd  =   cd;

if nargin <= 1

    [fname,pname,idx]   =   uigetfile('*.csv','Select the file containing the CALIBRATION MATRIX');
    fnameCal    =   [pname fname];
    clear fname pname;
    
    [fname,pname,idx]   =   uigetfile('*.anc','Select the BINARY FORCE DATA file');
    fnameBin    =   [pname fname];
    clear fname pname;
    
    fprintf('Importing calibration matrix file: %s...\n',fnameCal);
    calMat      =   importdata(fnameCal);
    
    fprintf('Importing Cortex binary force data file: %s...\n',fnameBin);
    data        =   importfile(fnameBin);

elseif nargin == 2
    calMat      =   varargin{1};
    data        =   varargin{2};
else
    error('Call to function CALCCORTEXF requires 0 or 2 input arguments.');
end

F           =   Binary2Forces(calMat,data);

cd(wd)
end

%% Subfunction to import calibration matrix
function data = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   DATA = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   DATA = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   data = importfile('test02.anc', 8, 4007);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/04/21 15:13:51

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 8;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Create output variable
data = [dataArray{1:end-1}];
end



%% subfunction to convert binary to force and torque
function N = Binary2Forces(calMat,data)
%% extract time variable
t = data(:,1);
%% convert bits to voltage
V = data(:,2:end)/3276.8;
%% preallocate space to N
N = nan(size(V,1),6);
%% run loop calculating forces and moments
for i = 1:size(N,1)
    N(i,:) = [V(i,:)*calMat']';
end
end
