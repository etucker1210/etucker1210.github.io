function data = SkBImport(data)
%This will import Lower Back and Upper Back angle data.  These files are
%Hrt files.  The First 54 Rows are info.  For the Lower back we need to
%specify that the first 54 rows are headers for the upper back this number
%is 
% All data should be in folders by trial date. Be sure a footfall.csv file
% is available in the root folder.

%% set some basic parameters
% Home
% addpath('F:\Research\Active Folders\Tail Regeneration\ProcessedRaw');
addpath(genpath('../GitHub/ComparativeBiomechanics/MATLAB/'));

curdir      =   cd;     % current directory

% an arbitrary value that limits the upper end of data import from trc
% files
maxPts      =   150;    
fps         =   500;
Fs          =   fps*10;

%% Import data
% import footfall data, which will be used to determine which files to use
% for remaining data. Also, import force plate calibration matrix, to be
% used to calculated forces from binary output data generated by Cortex.

% Automatically assign file and path parameters if working off Tonia's
% computer. Otherwise, request information, as needed.
if exist('/Users/ElizabethTucker/Desktop/Liz Basilisk Data') == 7    % laptop
    ffname                  =   'Footfalldataforceflat'; %'BasiliskFootfalls.xlsx';
    ffpath                  =   '/Users/ElizabethTucker/Desktop/Liz Basilisk Data/';
    newdir                  =   '/Users/ElizabethTucker/Desktop/Liz Basilisk Data/Data';
    
% elseif exist('C:\Users\Liz\Desktop\DataLarge') == 7    % laptop
%     ffname                  =   'FootFallData'; %'BasiliskFootfalls.xlsx';
%     ffpath                  =   'C:\Users\Liz\Desktop\DataLarge';
%     newdir                  =   'C:\Users\Liz\Desktop\DataLarge';
else
    [ffname,ffpath,fidx]        =   uigetfile('*.xlsx','Select Footfall File');
    newdir                      =   uigetdir('','Select the Directory Containing Data Folders'); 
    clear fidx
end

% Here is where importing the files and data actual begins
cd(ffpath);
[num,txt,raw]   =   xlsread(ffname);

ff.raw          =   raw;
ff.allfnames   	=   txt(2:end,1);
ff.datafolder   =   txt(2:end,2);

% Extract unique filenames
[ff.ufnames,ff.ia,ff.ic]    =   unique(txt(2:end,1),'stable');  
ff.datafolder               =   ff.datafolder(ff.ia);

datafiles       =   ff.ufnames;
numTrials       =   length(datafiles);
heads           =   cell([numTrials,1]);

clear num txt raw

for i = 1:numTrials
    fprintf('%d,',i)
    fname               =   datafiles{i};
    cd(ffpath)
    if isempty(strfind(fname,'.'))      % confirms that file extension not included
        skbfname       =   [fname '.htr.xlsx'];
    end

    data.skbfname{i} = skbfname;

    % change directory to the appropriate folder
    cd(newdir);
    cd(['./' ff.datafolder{i}]);
    
    % Import Angle Data
    %   numerical data import and assign to TEMP2
    A           =   importdata(skbfname);      % File has 54 header lines for Lower Back
    varnames    =   genvarname({'LowerBack','UpperBack','LHip','LUpperLeg','LLowerLeg',...
    'LFoot','RHip','RUpperLeg','RLowerLeg','RFoot','Neck','Head','LowerBackOther','UpperBackOther'});
     temph = A.textdata(64:end,:);
     temph = strrep(temph, ']','');
     temph = strrep(temph, '[','');
     temp = A.data(23:end,:);
     for t = 2:8
        b = find(temp(:,t) == [9999999]);
        temp(b,t) = NaN;
     end
     clear b
     for v = 1:length(varnames)
            % find the appropriate column for VARNAMES{v}
            varLoc  =  find(strcmp(temph,varnames{v}));
            rowstart = varLoc + 2;
            lengthrow = max(temp(:,1)) + rowstart -1;
            if isempty(varLoc)
                fprintf('No variable %s found for %s. Variables not created.\r',varnames{v},skbfname);
                eval([varnames{v} '{i}  = [];']);
            else
                if lengthrow > size(temp,1)
                    fprintf('No variable %s found for %s. Variables not created.\r',varnames{v},skbfname);
                    eval([varnames{v} '{i}  = [];']);
                else
                    %disp(sprintf('Variable %s is found to occupy row %d in file %s.\r',varnames{v},varLoc,skbfname));
                    % Extract the variable
                    temp2       =   temp(rowstart:lengthrow,5:7);
                    eval([varnames{v} '{i}  = temp2;']);
                end
            end
     end
     clear temp* lengthrow rowstart t v varLoc A
end

clear Fs heads max* n* f* s*  curdir ans varnames
data.LowerBackskb =LowerBack;
data.LHipskb = LHip;
data.LUpperLegskb = LUpperLeg
data.LLowerLegskb = LLowerLeg;
data.LFootskb = LFoot;
data.RHipskb = RHip;
data.RUpperLegskb = RUpperLeg;
data.RLowerLegskb = RLowerLeg;
data.RFootskb = RFoot;
data.UpperBackskb = UpperBack;
data.Neckskb = Neck;
data.Headskb = Head;
data.UpperBackOtherskb = UpperBackOther;
data.LowerBackOtherskb = LowerBackOther;
clear L* U* R* Neck Head i datafiles