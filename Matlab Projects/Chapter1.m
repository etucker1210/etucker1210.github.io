% %This will import Lower Back and Upper Back angle data.  These files are
% %Hrt files.  The First 54 Rows are info.  For the Lower back we need to
% %specify that the first 54 rows are headers for the upper back this number
% %is 
% % All data should be in folders by trial date. Be sure a footfall.csv file
% % is available in the root folder.
% 
% %% set some basic parameters
% % Home
% % addpath('F:\Research\Active Folders\Tail Regeneration\ProcessedRaw');
% addpath(genpath('../GitHub/ComparativeBiomechanics/MATLAB/'));
% 
% curdir      =   cd;     % current directory
% 
% % an arbitrary value that limits the upper end of data import from trc
% % files
% maxPts      =   150;    
% fps         =   500;
% Fs          =   fps*10;
% 
% %% Import data
% % import footfall data, which will be used to determine which files to use
% % for remaining data. Also, import force plate calibration matrix, to be
% % used to calculated forces from binary output data generated by Cortex.
% 
% % Automatically assign file and path parameters if working off Tonia's
% % computer. Otherwise, request information, as needed.
% if exist('/Users/ElizabethTucker/Desktop/Liz Basilisk Data') == 7    % laptop
%     ffname                  =   'Footfalldataforceflat'; %'BasiliskFootfalls.xlsx';
%     ffpath                  =   '/Users/ElizabethTucker/Desktop/Liz Basilisk Data/';
%     newdir                  =   '/Users/ElizabethTucker/Desktop/Liz Basilisk Data/Data';
%     
% elseif exist('C:\Users\Liz\Desktop\DataLarge') == 7    % laptop
%     ffname                  =   'FootFallData'; %'BasiliskFootfalls.xlsx';
%     ffpath                  =   'C:\Users\Liz\Desktop\DataLarge';
%     newdir                  =   'C:\Users\Liz\Desktop\DataLarge';
% else
%     [ffname,ffpath,fidx]        =   uigetfile('*.xlsx','Select Footfall File');
%     newdir                      =   uigetdir('','Select the Directory Containing Data Folders'); 
%     clear fidx
% end
% 
% % Here is where importing the files and data actual begins
% cd(ffpath);
% [num,txt,raw]   =   xlsread(ffname);
% 
% ff.raw          =   raw;
% ff.allfnames   	=   txt(2:end,1);
% ff.datafolder   =   txt(2:end,2);
% 
% % Extract unique filenames
% [ff.ufnames,ff.ia,ff.ic]    =   unique(txt(2:end,1),'stable');  
% ff.datafolder               =   ff.datafolder(ff.ia);
% 
% datafiles       =   ff.ufnames;
% numTrials       =   length(datafiles);
% heads           =   cell([numTrials,1]);
% 
% clear num txt raw
% 
% for i = 1:numTrials
%     fprintf('%d,',i)
%     fname               =   datafiles{i};
%     if isempty(strfind(fname,'.'))      % confirms that file extension not included
%         skbfname       =   [fname '.htr.xlsx'];
%     end
% 
%     data.skbfname{i} = skbfname;
% 
%     % change directory to the appropriate folder
%     cd(newdir);
%     cd(['./' ff.datafolder{i}]);
%     
%     % Import Angle Data
%     %   numerical data import and assign to TEMP2
%     A           =   importdata(skbfname);      % File has 54 header lines for Lower Back
%     varnames    =   genvarname({'LowerBack','UpperBack','LHip','LUpperLeg','LLowerLeg',...
%     'LFoot','RHip','RUpperLeg','RLowerLeg','RFoot','Neck','Head','LowerBackOther','UpperBackOther'});
%      temph = A.textdata(64:end,:);
%      temph = strrep(temph, ']','');
%      temph = strrep(temph, '[','');
%      temp = A.data(23:end,:);
%      for t = 2:8
%         b = find(temp(:,t) == [9999999]);
%         temp(b,t) = NaN;
%      end
%      clear b
%      for v = 1:length(varnames)
%             % find the appropriate column for VARNAMES{v}
%             varLoc  =  find(strcmp(temph,varnames{v}));
%             rowstart = varLoc + 2;
%             lengthrow = max(temp(:,1)) + rowstart -1;
%             if isempty(varLoc)
%                 fprintf('No variable %s found for %s. Variables not created.\r',varnames{v},skbfname);
%                 eval([varnames{v} '{i}  = [];']);
%             else
%                 if lengthrow > size(temp,1)
%                     fprintf('No variable %s found for %s. Variables not created.\r',varnames{v},skbfname);
%                     eval([varnames{v} '{i}  = [];']);
%                 else
%                     %disp(sprintf('Variable %s is found to occupy row %d in file %s.\r',varnames{v},varLoc,skbfname));
%                     % Extract the variable
%                     temp2       =   temp(rowstart:lengthrow,5:7);
%                     eval([varnames{v} '{i}  = temp2;']);
%                 end
%             end
%      end
%      clear temp* lengthrow rowstart t v varLoc A
% end
% 
% clear Fs heads max* n* f* s*  curdir ans varnames
% data.LowerBackskb =LowerBack;
% data.LHipskb = LHip;
% data.LUpperLegskb = LUpperLeg
% data.LLowerLegskb = LLowerLeg;
% data.LFootskb = LFoot;
% data.RHipskb = RHip;
% data.RUpperLegskb = RUpperLeg;
% data.RLowerLegskb = RLowerLeg;
% data.RFootskb = RFoot;
% data.UpperBackskb = UpperBack;
% data.Neckskb = Neck;
% data.Headskb = Head;
% data.UpperBackOtherskb = UpperBackOther;
% data.LowerBackOtherskb = LowerBackOther;
% clear L* U* R* Neck Head i datafiles

%%
titles = {'file name', 'mass (g)','Treatment', 'Utot', 'Utot stdev', 'mean duty factor',...
    'stride frequency', 'stride length (l) trial avg', 'stride length (R) trial avg','average toe stride length', ...
    'Max Fx (N)', 'Max Fy (N)','Max Fz (N)','Force Impulse X','Force Impulse Y', 'Force Impulse Z', 'Total force impulse',...
    'Xzang Imp','Yzang Imp','Svl (mm)', 'TDAng XZ','TDAng YZ','TDAng total','Stride Length  toe(L)', 'Stride Length toe(R)','COM Stride Length', ...
    'Stride in','Stride Out', 'Opposite', 'DeltKEx','DeltKEy','DeltKEz','DeltPE','DeltEcom', 'Kinetic', 'Stride Width','Stride Width Drop'...
    'kleg', 'kvert'};

numtrials = length(data.forcefname);

%Get average toe stride length
%this will grab the toe points from whatever data has been processed
% for some reason number of strides is off by one

strides = data.ff.numStr +1

rslen= NaN(numtrials,1);
lslen = NaN(numtrials,1);
for i = 1: length(data.ff.FD)%should change this
    dif(i,1) = min(data.ff.FD(i,:));
    dif(i,2) = max(data.ff.FD(i,:));
    if sum(isnan(dif(i,:)))>0
        dif(i,:) = 0;
        if mod(i,2) == 0
            rslen(i/2,1) = NaN;
        else 
            lslen((i+1)/2,1) = NaN;
        end
    else
        if mod(i,2) == 0
            if isempty(data.R_toe{1,i/2})==0
                rpos = data.R_toe{1,i/2}([dif(i,1) dif(i,2)],:)
                rslen(i/2,1) = sqrt(sum(diff(rpos(:,1:3)).^2))/strides(i);
            end
        else 
            if isempty(data.L_toe{1,(i+1)/2})==0
                lpos = data.L_toe{1,(i+1)/2}([dif(i,1) dif(i,2)],:)
                lslen((i+1)/2,1) = sqrt(sum(diff(lpos(:,1:3)).^2))/strides(i);
            end
        end
    end
end

tslen= lslen';
% for i= 1: length(rslen)
%     if rslen(i) == 0
%         rslen(i) = NaN;
%     end
% end
tslen(2,:) = rslen';
avgtslen= mean(tslen,1);


%this fills in any missing averages with the leg that is not missing data
for i= 1:length(avgtslen)
    if isnan(avgtslen(i))==1
        if isnan(rslen(i)) ==1
            avgtslen(i)=lslen(i,1);
        else
            avgtslen(i)=rslen(i,1);
        end
    end
end
 avgtslen = avgtslen';
%this calculates the COM stride length off of the back middle point.
for i = 1:numtrials
    if isempty(data.Back_middle{i})==0
    lpos= data.Back_middle{i}([dif(i*2-1,1) dif(i*2-1,2)],:);
    len(1,i)=sqrt(sum(diff(lpos(:,1:3)).^2))/strides(i*2-1);
    if dif(i*2,1) == 0
        rpos = NaN;
        len(2,1) = NaN;
    else
        rpos= data.Back_middle{i}([dif(i*2,1) dif(i*2,2)],:);
        len(2,i)=sqrt(sum(diff(rpos(:,1:3)).^2))/strides(i*2);
    end
    end
end
comlen = mean(len,1);
clear dif rpos lpos
%new stride width calculation
for trial = 1:2:2*length(data.forcefname)
    FD          =   data.ff.FD(trial:trial+1,1:3);
    if ~isempty(find(isnan(FD)))~=0
        m=[find(isnan(FD(2,:))),find(isnan(FD(1,:)))];
        pos = unique(m);
        FD(:,m) = [];
    end
    % step width calculation
    if  isempty(data.L_ankle{(trial+1)/2})==0
      Lpos        =   data.L_ankle{(trial+1)/2}(FD(1,:),1:2);
    else
     Lpos = 0;
    end
%     if isnan(Lpos(1,1)) == 1
%        Lpos(1,:) = L_ankle{(trial+1)/2}(FD(1,2),:)
%    end

    if isempty(data.R_ankle{(trial+1)/2})==0
      Rpos        =   data.R_ankle{(trial+1)/2}(FD(2,:),1:2);
    else
        Rpos = 0;
    end
  
    if exist('pos')
    
        Lpos(pos,:) = NaN;
        Rpos(pos,:) = NaN;
    end
    
    % shorten to the short length if these are of different lengths
            sWidth     =   sqrt(sum((Lpos-Rpos).^2,2))';
            stdWidth((trial+1)/2,1)  =   nanmean(sWidth);
        
    clear pos m sWidth *pos FD sWidth
end
%% Pull force data
ForcePeak = NaN(numtrials,3);
for trial = 1: length(data.forcefname)
    
switch data.ff.forcefoot{trial*2}
    case 'L'
        ForcePeak(trial,1) = data.FxPeak(trial);
        ForcePeak(trial,2) = abs(data.FyMin(trial));
        ForcePeak(trial,3) = data.FzPeak(trial);
    case 'R'
        ForcePeak(trial,1) = data.FxPeak(trial);
        ForcePeak(trial,2) = abs(data.FyPeak(trial));
        ForcePeak(trial,3) = data.FzPeak(trial);
end
end

%% Get Force impulse angle data
xzang = NaN(numtrials,1);
yzang= NaN(numtrials,1);
for i = 1:length(data.forcefname)
    xzang(i,1) = Angle2Horiz([data.Fimp(i,1),0,data.Fimp(i,3)]);
    yzang(i,1) = Angle2Horiz([data.Fimp(i,2),0,data.Fimp(i,3)]);

end

%%td angle recalculated

for i = 1: length(data.forcefname)
    if isempty(data.L_hip{i})==0 && isempty(data.R_hip{i}) ==0
        if strcmp(data.ff.forcefoot(i*2,1), 'L')
            %left toex 78  hip is 51
            temphip = data.L_hip{1,i}(data.ff.forcestep(i*2),:);
            temptoe = data.L_toe{1,i}(data.ff.forcestep(i*2),:);
        elseif strcmp(data.ff.forcefoot(i*2,1),'R')
            temphip = data.R_hip{1,i}(data.ff.forcestep(i*2),:);
            temptoe = data.R_toe{1,i}(data.ff.forcestep(i*2),:);
        else
            temphip = NaN(1,3);
            temptoe = NaN(1,3);
        end
        tdang(i,1) = Angle2Horiz([temphip(1),0,temphip(3)],[temptoe(1),0,temptoe(3)]);
        tdang(i,2) = Angle2Horiz([0,temphip(2),temphip(3)],[0,temptoe(2),temptoe(3)]);
        tdang(i,3) = Angle2Horiz(temphip,temptoe);
   clear temp*
    else tdang(i,1:3) = NaN;
    end
end
%The goal of this script is to gain individual kinematic data for each of
%the strides.  This will include stride length, duty factor, 
numtrials = length(data.forcefname);

%%
%This will calculate the stride length of the stride going into the drop
%and then after the drop. 
stdin = NaN(numtrials,1);
stdout = NaN(numtrials,1);
oppos = NaN(numtrials,1);
 for trial = 1: numtrials
% %     figure('NumberTitle','off','Name',data.ff.ufnames{trial});
% %        plotUglyFF(data.ff.FD((trial*2-1):(trial*2),:),data.ff.FO((trial*2-1):(trial*2),:))
% %        hold on 
% %         line(repmat(data.ff.forcestep(trial*2,1),1,2),repmat(ylim,1,1));
% %         line(repmat(data.ff.forcestep(trial*2,2),1,2),repmat(ylim,1,1));
% %        hold off
    if strcmp(data.ff.kinematic(trial*2),'Yes')
        if strcmp(data.ff.forcefoot(trial*2),'R')
            temp = isnan(data.ff.FD(trial*2,:));
            if isnan(data.ff.FD(trial*2-1,:))== 0
                lpos= data.L_toe{trial}([data.ff.FD(trial*2-1,3) data.ff.FD(trial*2-1,2)],:);
          
            else
            %think about how this might get fucked up
                lpos= data.L_toe{trial}([min(data.ff.FD(trial*2-1,:)) max(data.ff.FD(trial*2-1,:))],:);
            end
        
            rpos = nan(3,3);
            if sum(temp) == 0
                rpos = data.R_toe{trial}([repmat(data.ff.FD(trial*2,:),1,1)],:)
            else
                for i = 1:3
                    if temp(i) ==  0
                        rpos(i,:) = data.R_toe{trial}([repmat(data.ff.FD(trial*2,i),1,1)],:);
                    end
                end
            end
            stdin(trial) = sqrt(sum(diff(rpos(1:2,1:3))).^2);
            stdout(trial) = sqrt(sum(diff(rpos(2:3,1:3))).^2);
            oppos (trial) = sqrt(sum(diff(lpos(:,1:3))).^2);
            clear lpos rpos temp
    
    else 
        temp = isnan(data.ff.FD(trial*2-1,:));
        if sum(isnan(data.ff.FD(trial*2,:)))== 0
            rpos= data.R_toe{trial}([data.ff.FD(trial*2,3) data.ff.FD(trial*2,2)],:);
        elseif sum(isnan(data.ff.FD(trial*2,:)))==3 | sum(isnan(data.ff.FD(trial*2,:)))==4 |sum(isnan(data.ff.FD(trial*2,:)))==5
            rpos=nan(2,3);
        else       
            %think about how this might get fucked up
            rpos= data.R_toe{trial}([min(data.ff.FD(trial*2,:)) max(data.ff.FD(trial*2,:))],:);
        end
        
        lpos = nan(3,3);
        if sum(temp) == 0
            lpos = data.L_toe{trial}([repmat(data.ff.FD(trial*2-1,:),1,1)],:)
        else
            for i = 1:3
                if temp(i)== 0 & isempty(data.L_toe{trial}) ==  0
                    lpos(i,:) = data.L_toe{trial}([repmat(data.ff.FD(trial*2-1,i),1,1)],:);
                end
            end
        end
        
    stdin(trial) = sqrt(sum(diff(lpos(1:2,1:3))).^2);
    stdout(trial) = sqrt(sum(diff(lpos(2:3,1:3))).^2);
    oppos (trial) = sqrt(sum(diff(rpos(:,1:3))).^2);
    clear lpos rpos temp 
        
    end
        end
    end
%     % duty factor Pull FD and FO
% FD = data.ff.FD(trial*2-1:trial*2,:);
% FO = data.ff.FO(trial*2-1:trial*2,:);

%% Change in KE PE
 Delt = nan(length(data.forcefname),5);
 for i = 1: length(data.forcefname)
    if strcmp(data.ff.kinematic(i*2),'Yes')
     deltKE = data.KE{i}(end,1:3)-data.KE{i}(1,1:3);
     deltPE = data.PE{i}(end,1) - data.PE{i}(1,1);
     Etot        =   sum([data.KE{i}(:,1:3),data.PE{i}],2);
     deltEtot = Etot(end,1)-Etot(1,1);
     Delt(i,1:3) = deltKE;
     Delt(i,4) = deltPE;
     Delt(i,5) = deltEtot;
    end
    end
%      clear delt*
% end


    i = length(data.forcefname)+1;
    
    things = titles;
    things (2:i,1) = data.forcefname';
    things (2:i,2) = data.ff.raw(2:2:end,3);
    things (2:i,3) = data.ff.treat(1:2:end,1);
    things (2:i,4:5) = num2cell(data.Utot.mean);
    things (2:i,6) = num2cell(data.DF(:,1));
    things (2:i,7) = num2cell(data.sFreq(:,1));
    things (2:i,8) = num2cell(data.LsLen(:,1));
    things (2:i,9) = num2cell(data.RsLen(:,1));
    things (2:i,10) = num2cell(avgtslen(:,1));
    things (2:i,11) = num2cell(ForcePeak(:,1));
    things (2:i,12) = num2cell(ForcePeak(:,2));
    things (2:i,13) =num2cell(ForcePeak(:,3));
    things(2:i,14:17) = num2cell(data.Fimp);
    things(2:i,18) = num2cell(xzang);
    things(2:i,19) = num2cell(yzang);
    things(2:i,20)= num2cell(data.ff.svl(1:2:end,:)); 
    things(2:i,21:23) = num2cell(tdang);
    things(2:i,24) = num2cell(lslen);
    things(2:i,25) = num2cell(rslen);
    things(2:i,26) =num2cell(comlen');
    things(2:i,27) = num2cell(stdin');
    things(2:i,28) = num2cell(stdout');
    things(2:i,29) = num2cell(oppos');
    things(2:i,30:34) = num2cell(Delt);
    things(2:i,35) = data.ff.kinematic(1:2:end,1);
    things(2:i,36:37) = num2cell(data.sWidth);
    things(2:i,38) = num2cell(data.kleg');
    things(2:i,39) = num2cell(data.kvert');
data.forcepeak = ForcePeak;
data.avgtstdlen =  avgtslen;
data.tdangliz =tdang;
data.fimpxzang = xzang;
data.fimpyzang = yzang;

path = 'C:\Users\Liz\Desktop\DataLarge'  ;  
clear ForcePeak i *len *trial* *ang titles   avg* *ang std* oppos
cd(path)
% xlswrite('Data_Variables.xlsx',things);
%%
 %% this will give touchdown angles at each stride for each foot
% numtrials = length(data.forcefname);
% Bas9 = ('Trimmed_Bas09');
% Bas10 = ('Trimmed_Bas10');
% Bas26 = ('Trimmed_Bas26');
% Bas31 = ('Trimmed_Bas31');
% Bas9TDF = nan(1,3);
% Bas10TDF = nan(1,3);
% Bas26TDF = nan(1,3);
% Bas31TDF = nan(1,3);
% Bas9TDD = nan(1,1);
% Bas10TDD = nan(1,1);
% Bas26TDD= nan(1,1);
% Bas31TDD = nan(1,1);
% treatment = ['Flat';'Drop'];
% for i = 1:numtrials
%     trial = data.forcefname(i);
%     L_hip = data.L_hip{i};
%     L_ankle = data.L_ankle{i};
%     R_hip= data.R_hip{i};
%     R_ankle = data.R_ankle{i};
%     FD = data.ff.FD(i*2-1:i*2,:);
%     Zero = zeros(length(L_ankle),1);
%     
%     if ~isempty(L_hip) & ~isempty(L_ankle)
%         [~,angL]             =   Angle2Horiz(L_hip, L_ankle);
%         %[~,angL]             =   Angle2Horiz([L_hip(:,1),Zero,L_hip(:,3)], [L_ankle(:,1),Zero,L_ankle(:,3)]);
%     end
%     if ~isempty(R_hip) & ~isempty(R_ankle)
%         [~,angR]             =   Angle2Horiz(R_hip, R_ankle);
%         %[~,angR] =  Angle2Horiz([R_hip(:,1),Zero,R_hip(:,3)], [R_ankle(:,1),Zero,R_ankle(:,3)]);
%     end
%     angR = angR*180/pi;
%     angL = angL*180/pi;
%     right =  (angR(FD(2,~isnan(FD(2,:)))))';
%     left = (angL(FD(1,~isnan(FD(1,:)))))';
%     r=length(right);
%     l=length(left);
%     if strcmp(data.ff.treat(i*2),'Drop') && strcmp(data.ff.forcefoot(i*2),'R')
%         drop = angR(data.ff.forcestep(i*2,1));
%     elseif strcmp(data.ff.treat(i*2), 'Drop') && strcmp(data.ff.forcefoot(i*2),'L')
%         drop = angL(data.ff.forcestep(i*2,1));
%     else       
%     end
%     if startsWith(trial,Bas9)
%         if strcmp(data.ff.treat(i*2),'Flat')
%            a = size(Bas9TDF,1);
%            Bas9TDF(a+1,1:l)=left;
%            Bas9TDF(a+2,1:r) = right;
%         else
%            a = size(Bas9TDD,1);
%            Bas9TDD(a+1,1)=drop;
%         end
%     elseif startsWith(trial,Bas10)
%         if strcmp(data.ff.treat(i*2),'Flat')
%            a = size(Bas10TDF,1);
%            Bas10TDF(a+1,1:l)=left;
%            Bas10TDF(a+2,1:r) = right;
%         else
%            a = size(Bas10TDD,1);
%            Bas10TDD(a+1,1)=drop;
%         end
%     elseif startsWith(trial,Bas26)
%         if strcmp(data.ff.treat(i*2),'Flat')
%            a = size(Bas26TDF,1);
%            if strcmp(data.forcefname(i),'Trimmed_Bas26_2015_08_19_Trial12.anc')
%                Bas26TDF(a+1,1:l) = nan(1,l);
%            else
%                Bas26TDF(a+1,1:l)=left;
%            end
%            Bas26TDF(a+2,1:r) = right;
%         else
%            a = size(Bas26TDD,1);
%            Bas26TDD(a+1,1)=drop;
%         end
%     else
%         if strcmp(data.ff.treat(i*2),'Flat')
%            a = size(Bas31TDF,1);
%            Bas31TDF(a+1,1:l)=left;
%            Bas31TDF(a+2,1:r) = right;
%         else
%            a = size(Bas31TDD,1);
%            Bas31TDD(a+1,1)=drop;
%         end
%     end
%     clear a left right FD L* R* r l numtrials trial ang*
% end
% clear i Bas10 Bas26 Bas9 Bas31
% Bas9TDF(1,:)  = [];
% Bas10TDF(1,:) = [];
% Bas26TDF(1,:) = [];
% Bas31TDF(1,:) = [];
% Bas9TDD(1,:)  = [];
% Bas10TDD(1,:) = [];
% Bas26TDD(1,:) = [];
% Bas31TDD(1,:) = [];
% Bas9TDF(Bas9TDF==0)  = NaN;
% Bas10TDF(Bas10TDF==0)  = NaN;
% Bas26TDF(Bas26TDF==0)  = NaN;
% Bas31TDF(Bas31TDF==0)  = NaN;
% Bas9TDD(Bas9TDD==0)  = NaN;
% Bas10TDD(Bas10TDD==0)  = NaN;
% Bas26TDD(Bas26TDD==0)  = NaN;
% Bas31TDD(Bas31TDD==0)  = NaN;
% Bas9TD(:,1)=Bas9TDF(:);
% Bas9TD(1:8,2)=Bas9TDD;
% Bas10TD(:,1)=Bas10TDF(:);
% Bas10TD(1:8,2)=Bas10TDD;
% Bas26TD(:,1)=Bas26TDF(:);
% Bas26TD(1:8,2)=Bas26TDD;
% Bas31TD(:,1)=Bas31TDF(:);
% Bas31TD(1:8,2)=Bas31TDD;
% Bas9TD(Bas9TD==0)  = NaN;
% Bas10TD(Bas10TD==0)  = NaN;
% Bas26TD(Bas26TD==0)  = NaN;
% Bas31TD(Bas31TD==0)  = NaN;
% % figure('Name','Bas09TD')
% % boxplot(Bas9TD,treatment)
% % figure('Name','Bas10TD')
% % boxplot(Bas10TD,treatment)
% % figure('Name','Bas26TD')
% % boxplot(Bas26TD,treatment)
% % figure('Name','Bas31TD')
% % boxplot(Bas31TD,treatment)
% FlatTD = Bas9TDF(:);
% FlatTD= [FlatTD;Bas10TDF(:)];
% FlatTD= [FlatTD;Bas26TDF(:)];
% FlatTD= [FlatTD;Bas31TDF(:)];
% DropTD = Bas9TDD(:);
% DropTD = [DropTD;Bas10TDD(:)];
% DropTD = [DropTD;Bas26TDD(:)];
% DropTD = [DropTD;Bas31TDD(:)];
% TD = FlatTD;
% TD(1:length(DropTD),2) = DropTD;
% TD(TD==0)  = NaN;
% % figure('Name','Total TD angle')
% % boxplot(TD,treatment)
% 
% lizTD = Bas9TD;
% lizTD = [lizTD Bas10TD];
% lizTD = [lizTD Bas26TD];
% lizTD = [lizTD Bas31TD];
% boxplot(lizTD,'labels',{'Bas9 Flat','Bas9 Drop','Bas10 Flat','Bas10 Drop','Bas26 Flat', 'Bas26 Drop', 'Bas31 Flat', 'Bas31 Drop'})
% ylabel('Touch Down Angle in Degrees')